//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientOperations.OperationsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OperationsService.OperationsSoap")]
    public interface OperationsSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/add", ReplyAction="*")]
        int add(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/add", ReplyAction="*")]
        System.Threading.Tasks.Task<int> addAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/rest", ReplyAction="*")]
        int rest(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/rest", ReplyAction="*")]
        System.Threading.Tasks.Task<int> restAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/multiply", ReplyAction="*")]
        int multiply(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/multiply", ReplyAction="*")]
        System.Threading.Tasks.Task<int> multiplyAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/divide", ReplyAction="*")]
        int divide(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/divide", ReplyAction="*")]
        System.Threading.Tasks.Task<int> divideAsync(int a, int b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface OperationsSoapChannel : ClientOperations.OperationsService.OperationsSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OperationsSoapClient : System.ServiceModel.ClientBase<ClientOperations.OperationsService.OperationsSoap>, ClientOperations.OperationsService.OperationsSoap {
        
        public OperationsSoapClient() {
        }
        
        public OperationsSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OperationsSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperationsSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperationsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int add(int a, int b) {
            return base.Channel.add(a, b);
        }
        
        public System.Threading.Tasks.Task<int> addAsync(int a, int b) {
            return base.Channel.addAsync(a, b);
        }
        
        public int rest(int a, int b) {
            return base.Channel.rest(a, b);
        }
        
        public System.Threading.Tasks.Task<int> restAsync(int a, int b) {
            return base.Channel.restAsync(a, b);
        }
        
        public int multiply(int a, int b) {
            return base.Channel.multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<int> multiplyAsync(int a, int b) {
            return base.Channel.multiplyAsync(a, b);
        }
        
        public int divide(int a, int b) {
            return base.Channel.divide(a, b);
        }
        
        public System.Threading.Tasks.Task<int> divideAsync(int a, int b) {
            return base.Channel.divideAsync(a, b);
        }
    }
}
